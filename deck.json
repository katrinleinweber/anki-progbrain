{
    "__type__": "Deck",
    "children": [],
    "crowdanki_uuid": "5badbda4-6e29-11ec-b708-acde48001122",
    "deck_config_uuid": "fedbb5ce-1949-11ec-9bd9-6c4008a25dc6",
    "deck_configurations": [
        {
            "__type__": "DeckConfig",
            "autoplay": false,
            "crowdanki_uuid": "fedbb5ce-1949-11ec-9bd9-6c4008a25dc6",
            "dyn": false,
            "interdayLearningMix": 0,
            "lapse": {
                "delays": [
                    10.0
                ],
                "leechAction": 0,
                "leechFails": 8,
                "minInt": 1,
                "mult": 0.0
            },
            "maxTaken": 30,
            "name": "Default",
            "new": {
                "bury": true,
                "delays": [
                    5.0
                ],
                "initialFactor": 2500,
                "ints": [
                    1,
                    4,
                    0
                ],
                "order": 1,
                "perDay": 10,
                "separate": true
            },
            "newGatherPriority": 0,
            "newMix": 0,
            "newPerDayMinimum": 0,
            "newSortOrder": 0,
            "replayq": false,
            "rev": {
                "bury": true,
                "ease4": 1.44,
                "fuzz": 0.05,
                "hardFactor": 1.2,
                "ivlFct": 0.55,
                "maxIvl": 90,
                "minSpace": 1,
                "perDay": 20
            },
            "reviewOrder": 0,
            "timer": 0
        }
    ],
    "desc": "",
    "dyn": 0,
    "extendNew": 0,
    "extendRev": 0,
    "media_files": [],
    "name": "Programmer's Brain (Felienne Hermans)",
    "note_models": [
        {
            "__type__": "NoteModel",
            "crowdanki_uuid": "fedbe580-1949-11ec-9bd9-6c4008a25dc6",
            "css": ".card {\n font-family: arial;\n font-size: 20px;\n text-align: center;\n color: black;\n background-color: white;\n}\n",
            "flds": [
                {
                    "description": "",
                    "font": "Arial",
                    "media": [],
                    "name": "Front",
                    "ord": 0,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "description": "",
                    "font": "Arial",
                    "media": [],
                    "name": "Back",
                    "ord": 1,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                }
            ],
            "latexPost": "\\end{document}",
            "latexPre": "\\documentclass[12pt]{article}\n\\special{papersize=3in,5in}\n\\usepackage{amssymb,amsmath}\n\\usepackage[utf8]{inputenc}\n\\pagestyle{empty}\n\\setlength{\\parindent}{0in}\n\\begin{document}\n",
            "latexsvg": false,
            "name": "ProgBrain",
            "req": [
                [
                    0,
                    "any",
                    [
                        0
                    ]
                ]
            ],
            "sortf": 0,
            "tags": [
                "Computer programming -- Study and teaching",
                "Cognitive learning"
            ],
            "tmpls": [
                {
                    "afmt": "{{FrontSide}}\n\n<hr id=answer>\n\n{{Back}}",
                    "bafmt": "",
                    "bfont": "",
                    "bqfmt": "",
                    "bsize": 0,
                    "did": null,
                    "name": "Card 1",
                    "ord": 0,
                    "qfmt": "{{Front}}"
                }
            ],
            "type": 0,
            "vers": []
        }
    ],
    "notes": [
        {
            "__type__": "Note",
            "fields": [
                "Which different sources can a confusion while reading code result from",
                "Lack of:<br><ul><li>knowledge (of syntax, algorithm, or domain)<br></li><li>information about (or access to) particular details needed for understanding</li><li>cognitive processing power, because the code is too complicated for your brain</li></ul>"
            ],
            "guid": "d`/Uler_,p",
            "note_model_uuid": "fedbe580-1949-11ec-9bd9-6c4008a25dc6",
            "tags": [
                "chapter-1"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "Lack of knowledge can be remedied by …",
                "… learning relevant facts and committing them to LTM."
            ],
            "guid": "nPe!Wr^in&",
            "note_model_uuid": "fedbe580-1949-11ec-9bd9-6c4008a25dc6",
            "tags": [
                "chapter-1"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "What does \"LTM\" mean?",
                "Long-Term Memory"
            ],
            "guid": "ePh$ohAw|>",
            "note_model_uuid": "fedbe580-1949-11ec-9bd9-6c4008a25dc6",
            "tags": [
                "chapter-1"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "What does \"STM\" mean?",
                "Short-Term Memory"
            ],
            "guid": "f8I4p9m$~`",
            "note_model_uuid": "fedbe580-1949-11ec-9bd9-6c4008a25dc6",
            "tags": [
                "chapter-1"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "What does \"WM\" mean &amp; what is combined of?",
                "Working Memory; Combines information from L- &amp; STM."
            ],
            "guid": "4pj{*:M5>",
            "note_model_uuid": "fedbe580-1949-11ec-9bd9-6c4008a25dc6",
            "tags": [
                "chapter-1"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "Which memory type often overrides which other type? Example?",
                "Not noticing spelling mistakes while reading shows that LTM can override STM."
            ],
            "guid": "Qaj:$ETgGZ",
            "note_model_uuid": "fedbe580-1949-11ec-9bd9-6c4008a25dc6",
            "tags": [
                "chapter-1"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "What to do 1st to resolve confusion when reading code?",
                "Identify which of the 3 common sources it results from: lack of knowledge, information or processing power."
            ],
            "guid": "yUc<>}u4`+",
            "note_model_uuid": "fedbe580-1949-11ec-9bd9-6c4008a25dc6",
            "tags": [
                "chapter-1"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "Where does the brain store the meaning of code syntax or keywords, concepts, and algorithms?",
                "In LTM, after repeated practice or learning."
            ],
            "guid": "scDI6Wsp`b",
            "note_model_uuid": "fedbe580-1949-11ec-9bd9-6c4008a25dc6",
            "tags": [
                "chapter-1"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "What helps chunking, and thus the code reader's STM?",
                "<ul><li style=\"text-align: left;\">Design patterns</li><li style=\"text-align: left;\">High-level comments</li></ul>"
            ],
            "guid": "f|OMUm57eR",
            "note_model_uuid": "fedbe580-1949-11ec-9bd9-6c4008a25dc6",
            "tags": [
                "chapter-2"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "Why do unusual variable names, or too low-level comments, or seemingly random code structuring hinder reading?",
                "Prevents the brain's pattern matching and/or the detection of chunks. This disrupts LTM's ability to assist STM."
            ],
            "guid": "pH/(qnwM^V",
            "note_model_uuid": "fedbe580-1949-11ec-9bd9-6c4008a25dc6",
            "tags": [
                "chapter-2"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "What are the limitations of the STM?",
                "<ul><li style=\"text-align: left;\">emptied after ca. 30sec</li><ul><li style=\"text-align: left;\">and upon task completion (or context switch)</li></ul><li style=\"text-align: left;\">size of only a few items (&lt;10)</li></ul>"
            ],
            "guid": "BuUA3B<f3C",
            "note_model_uuid": "fedbe580-1949-11ec-9bd9-6c4008a25dc6",
            "tags": [
                "chapter-2"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "What advantage does chunking provide?",
                "Fewer slots are required in STM, because only concept \"pointers\" are stored. Details of those concepts are retrieved from LTM."
            ],
            "guid": "OG)(8<KpLq",
            "note_model_uuid": "fedbe580-1949-11ec-9bd9-6c4008a25dc6",
            "tags": [
                "chapter-2"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "What consequence do STM limits have for onboarding?",
                "Focus should be on going slowly, and investing in LTM training for each new concept, keyword, etc."
            ],
            "guid": "gE;$n+w5RS",
            "note_model_uuid": "fedbe580-1949-11ec-9bd9-6c4008a25dc6",
            "tags": [
                "chapter-2"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "What is iconic memory &amp; how to access it?",
                "A \"buffer\" between eyes &amp; STM. Access it by glancing only briefly at code, and then recalling over-all structure (deep nesting, outstanding lines, gaps, blobs, etc.)."
            ],
            "guid": "LW;wk,#;5g",
            "note_model_uuid": "fedbe580-1949-11ec-9bd9-6c4008a25dc6",
            "tags": [
                "chapter-2"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "What should a beacon help with?",
                "Provide an \"Ah-ha!\" moment to readers and/or help in confirming or refuting a hypothesis about the code they might have formed."
            ],
            "guid": "Cs*h+]=Iix",
            "note_model_uuid": "fedbe580-1949-11ec-9bd9-6c4008a25dc6",
            "tags": [
                "chapter-2"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "Which beacon types are common?",
                "<ul><li style=\"text-align: left;\">simple: meaningful names</li><li style=\"text-align: left;\">compound: hint at semantic meaning of what the simple beacons execute together</li></ul>"
            ],
            "guid": "kA`4%lYL2g",
            "note_model_uuid": "fedbe580-1949-11ec-9bd9-6c4008a25dc6",
            "tags": [
                "chapter-2"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "What's one strategy to avoid distractions while reading code?",
                "Committing knowledge into LTM, so that supplementing STM with looking up things is required less often."
            ],
            "guid": "L}G387Ui4r",
            "note_model_uuid": "fedbe580-1949-11ec-9bd9-6c4008a25dc6",
            "tags": [
                "chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "Because programming language have so much fewer keywords than natural languages ...",
                "... flashcards are even more effective for learning the former."
            ],
            "guid": "BS&!K;Y_*U",
            "note_model_uuid": "fedbe580-1949-11ec-9bd9-6c4008a25dc6",
            "tags": [
                "chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "What to <i>also</i> do when googling some thing you didn't know?",
                "Immediately creating a flashcard for that thing."
            ],
            "guid": "y|zqYd0Tv+",
            "note_model_uuid": "fedbe580-1949-11ec-9bd9-6c4008a25dc6",
            "tags": [
                "chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "According to which pattern does the LTM decay?",
                "Exponentially, within hours to a few days to ca. 25% of once-exposed details."
            ],
            "guid": "ukQl#+2;CH",
            "note_model_uuid": "fedbe580-1949-11ec-9bd9-6c4008a25dc6",
            "tags": [
                "chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "<div style=\"text-align: center;\">Which repetition patterns are generally more effective?</div>",
                "Fewer repetitions per session, but longer periods of time in between (days to weeks)."
            ],
            "guid": "F~{U*%a0p!",
            "note_model_uuid": "fedbe580-1949-11ec-9bd9-6c4008a25dc6",
            "tags": [
                "chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "What is fine to do as rarely as once per months to keep LTM trained?",
                "Practice with your flashcard set."
            ],
            "guid": "QDn}5$=n?J",
            "note_model_uuid": "fedbe580-1949-11ec-9bd9-6c4008a25dc6",
            "tags": [
                "chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "What are \"retrieval practice\" and \"elaboration\" both?",
                "Memory strengthening techniques for LTM (i.e. pathways and connections within it)."
            ],
            "guid": "PY+y7(>u}1",
            "note_model_uuid": "fedbe580-1949-11ec-9bd9-6c4008a25dc6",
            "tags": [
                "chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "What's the technique of actively trying to remember something called?",
                "retrieval practice"
            ],
            "guid": "h(!enKMhep",
            "note_model_uuid": "fedbe580-1949-11ec-9bd9-6c4008a25dc6",
            "tags": [
                "chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "What's the technique to actively connecting new knowledge to existing memories called?",
                "elaboration"
            ],
            "guid": "NcH2%w]AQd",
            "note_model_uuid": "fedbe580-1949-11ec-9bd9-6c4008a25dc6",
            "tags": [
                "chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "What are the limit on LTM?",
                "retrieval strength (limiting factor) &amp; storage strength"
            ],
            "guid": "E^P|5ROFHz",
            "note_model_uuid": "fedbe580-1949-11ec-9bd9-6c4008a25dc6",
            "tags": [
                "chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "What is a modern vicious cycle in day-to-day work?",
                "<ul><li style=\"text-align: left;\">easy look-up of details</li><li style=\"text-align: left;\">low incentive to learn by heart</li><li style=\"text-align: left;\">retrieval strength remains weak</li><li style=\"text-align: left;\">details need to be looked up again</li></ul>"
            ],
            "guid": "vqCvMs>,f{",
            "note_model_uuid": "fedbe580-1949-11ec-9bd9-6c4008a25dc6",
            "tags": [
                "chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "Which memory strengthening technique is better for complex concepts?",
                "Elaboration: active reflection of information and their connection to other knowledge."
            ],
            "guid": "Juw!{ZlJ*E",
            "note_model_uuid": "fedbe580-1949-11ec-9bd9-6c4008a25dc6",
            "tags": [
                "chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "Which points to elaborate when learning a new programming<br>concept?",
                "<ol><li style=\"text-align: left;\">related concepts</li><ul><li style=\"text-align: left;\">Why related? What's the association (type)?</li><li style=\"text-align: left;\">Does it share syntax?</li><li style=\"text-align: left;\">Used in a similar contexts?</li></ul><li style=\"text-align: left;\">What other code variants would achieve the same goal?</li><li style=\"text-align: left;\">Same concept in other programming languages? Examples that support similar operations? Differences?</li><li style=\"text-align: left;\">Fits a certain paradigm, domain, library, etc.?</li></ol>"
            ],
            "guid": "o!d5C;azqd",
            "note_model_uuid": "fedbe580-1949-11ec-9bd9-6c4008a25dc6",
            "tags": [
                "chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "Which types of cognitive load are to be distinguished (according to John Sweller)",
                "Intrinsic, extraneous &amp; germane"
            ],
            "guid": "nH.GQ87yBH",
            "note_model_uuid": "fedbe580-1949-11ec-9bd9-6c4008a25dc6",
            "tags": [
                "chapter-4"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "What is intrinsic (cognitive) load?",
                "How complex a problem is in itself. AKA \"inherent complexity\" or \"essential\" (Brooks)"
            ],
            "guid": "fQ>+eq?6S9",
            "note_model_uuid": "fedbe580-1949-11ec-9bd9-6c4008a25dc6",
            "tags": [
                "chapter-4"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "What is extraneous (cognitive) load?",
                "Additional problems, like distractions, unclear problem statement. AKA \"accidental complexity\" (Brooks)"
            ],
            "guid": "o=K_XU+izo",
            "note_model_uuid": "fedbe580-1949-11ec-9bd9-6c4008a25dc6",
            "tags": [
                "chapter-4"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "What is germane (cognitive) load?",
                "AKA \"relevant\". Effort your brain needs to exert to store information back to the LTM."
            ],
            "guid": "%/nCI,23t",
            "note_model_uuid": "fedbe580-1949-11ec-9bd9-6c4008a25dc6",
            "tags": [
                "chapter-10",
                "chapter-4"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "When your WM is overloaded, which process is impacted? Even for problems you have solved!",
                "Storing knowledge about the solution in LTM, because intrinsic and/or extraneous load (cognitive) load left no capacity to overcome germane load."
            ],
            "guid": "Mxcm#t6#|m",
            "note_model_uuid": "fedbe580-1949-11ec-9bd9-6c4008a25dc6",
            "tags": [
                "chapter-10",
                "chapter-4"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "How to analyze unfamiliar code, that makes you feel a high cognitive load?",
                "Per line, note down whether it causes intrinsic or extraneous load."
            ],
            "guid": "J:{F3n^.wA",
            "note_model_uuid": "fedbe580-1949-11ec-9bd9-6c4008a25dc6",
            "tags": [
                "chapter-4"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "Which cognitive load type is variable for different people's prior knowledge level, different style of coding the same problem, etc.?",
                "Extraneous load, because it is modulated by those different, prior experiences."
            ],
            "guid": "m/-wbpzFUV",
            "note_model_uuid": "fedbe580-1949-11ec-9bd9-6c4008a25dc6",
            "tags": [
                "chapter-4"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "Which refactorings can reduce extraneous load while reading code? And why?",
                "inlining &amp; reordering, to reduce delocalisation &amp; ease strain on WM"
            ],
            "guid": "AUYU3RMHNr",
            "note_model_uuid": "fedbe580-1949-11ec-9bd9-6c4008a25dc6",
            "tags": [
                "chapter-4"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "Which tension exists between the different types of refactoring?",
                "\"Normal\" refactoring aims to increase maintainability, but that often increases delocalisation, which hinders readability. \"Cognitive\" refactoring is the reverse."
            ],
            "guid": "FC`vOkH+Q!",
            "note_model_uuid": "fedbe580-1949-11ec-9bd9-6c4008a25dc6",
            "tags": [
                "chapter-4"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "Which tactics are supported by maintaining a personal \"understanding\" branch?",
                "<ul><li style=\"text-align: left;\">cognitive refactorings</li><li style=\"text-align: left;\">adding comments</li><li style=\"text-align: left;\">replacing unfamiliar language constructs</li></ul>"
            ],
            "guid": "CGbxJ/sD51",
            "note_model_uuid": "fedbe580-1949-11ec-9bd9-6c4008a25dc6",
            "tags": [
                "chapter-4"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "Which language constructs are often unfamiliar &amp; could thus be temporarily refactored to assist WM?",
                "<ul><li style=\"text-align: left;\">ternary operator &lt;=&gt; if/else block</li><li style=\"text-align: left;\">lambda &lt;=&gt; regular function</li><li style=\"text-align: left;\">list comprehension &lt;=&gt; for loop</li></ul>However, investing in committing those constructs to LTM is advisable (flashcards with both variants)."
            ],
            "guid": "pQ?afPZ%G1",
            "note_model_uuid": "fedbe580-1949-11ec-9bd9-6c4008a25dc6",
            "tags": [
                "chapter-4"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "How to create a dependency graph?",
                "<ol><li style=\"text-align: left;\">highlight all variables &amp; link same or similar ones</li><li style=\"text-align: left;\">highlight all function/methods calls &amp; link them to their definition/declaration<br></li><li style=\"text-align: left;\">highlight all instances &amp; link them to their classes</li></ol>"
            ],
            "guid": "GEAk&(M1Mr",
            "note_model_uuid": "fedbe580-1949-11ec-9bd9-6c4008a25dc6",
            "tags": [
                "chapter-4"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "What do dependency graphs &amp; state tables help with?",
                "Reducing cognitive load on your WM. Esp. when drawing them on a printed copy of the code."
            ],
            "guid": "qwRO>Lc`]l",
            "note_model_uuid": "fedbe580-1949-11ec-9bd9-6c4008a25dc6",
            "tags": [
                "chapter-4"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "When &amp; how to create a state table?",
                "<div style=\"text-align: left;\">For calculations that need to be understood.</div><ol><li style=\"text-align: left;\">list all variables as table columns</li><li style=\"text-align: left;\">mentally compile/trace/execute step-by-step</li><li style=\"text-align: left;\">add one row per step &amp; fill all variable values</li></ol>"
            ],
            "guid": "NaM#d.P7Gt",
            "note_model_uuid": "fedbe580-1949-11ec-9bd9-6c4008a25dc6",
            "tags": [
                "chapter-4"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "In a state table, which kinds of execution steps can represent one row?",
                "<ul><li style=\"text-align: left;\">trivial code chunk</li><li style=\"text-align: left;\">loop iteration</li><li style=\"text-align: left;\">if/else branch</li><li style=\"text-align: left;\">each line in terse code</li></ul>"
            ],
            "guid": "hBmxJOZ{yy",
            "note_model_uuid": "fedbe580-1949-11ec-9bd9-6c4008a25dc6",
            "tags": [
                "chapter-4"
            ]
        }
    ]
}
